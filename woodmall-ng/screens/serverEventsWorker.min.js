let isSharedWorker;try{isSharedWorker=postMessage===void 0}catch(e){isSharedWorker=!0}let workerUniqueIdentifier="",workerId=Math.floor(Math.random()*1e4),listeners=[],checkAlive=[];const sessionsData={};let debugEnabled=!1;function debug(...e){debugEnabled&&(e.length===1?console.log("Worker: "+e[0]):e.length===2?console.log("Worker: "+e[0],e[1]):e.length===3?console.log("Worker: "+e[0],e[1],e[2]):e.length===4?console.log("Worker: "+e[0],e[1],e[2],e[3]):e.length===5?console.log("Worker: "+e[0],e[1],e[2],e[3],e[4]):e.length===6?console.log("Worker: "+e[0],e[1],e[2],e[3],e[4],e[5]):console.log("Worker:",e))}debug("start");function generateUniqueId(e){let n="";const i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",r=i.length;for(let s=0;s<e;s++)n+=i.charAt(Math.floor(Math.random()*r));return n}workerUniqueIdentifier=generateUniqueId(8);function subscribe(e,n,i,r){if(sessionsData[e]!==void 0){const s=sessionsData[e],t=new XMLHttpRequest;debug("Will subscribe to "+i),t.onreadystatechange=function(){if(debug("Subscribing status ",t.readyState,t.status),t.readyState===XMLHttpRequest.DONE)if(t.status===200){const o=t.responseText;s.subscriptionsToListener.push([o,n]),r(o)}else t.status===401||listeners.forEach(o=>{o.postMessage({messageType:"subscribeFailed",error:"HTTP Status "+t.status})})},debug("Subscribing",i),t.open("GET",s.urlPrefix+i,!0),e.length>0&&t.setRequestHeader("Authorization",e),t.withCredentials=!0,t.send()}}function unsubscribe(e,n,i,r){if(sessionsData[e]!==void 0&&sessionsData[e].channelId!==void 0){const s=sessionsData[e],t=new XMLHttpRequest;s.subscriptionsToListener.filter(u=>u[0]===i)[0][1]===n&&(t.onreadystatechange=function(){t.readyState===XMLHttpRequest.DONE&&t.status===200&&(s.subscriptionsToListener=s.subscriptionsToListener.filter(u=>u[0]!==i),r())},debug("Unsubscribing",i),t.open("GET",s.urlPrefix+"server-events/unsubscribe/"+s.channelId+"/"+i,!0),e.length>0&&t.setRequestHeader("Authorization",e),t.withCredentials=!0,t.send())}}function startListening(e,n,i){debug("Start listening"),sessionsData[e]===void 0&&(sessionsData[e]={channelOpenListeners:[],subscriptionsToListener:[],urlPrefix:""});const r=sessionsData[e];if(r.channelOpeningInProgress===!0)debug("Delaying opening new channel"),r.channelOpenListeners.push(i);else if(r.channelId===void 0){r.channelOpeningInProgress=!0,debug("Opening new channel"),r.urlPrefix=n;const s=new XMLHttpRequest;s.onreadystatechange=function(){if(s.readyState===XMLHttpRequest.DONE){if(s.status===200){const t=JSON.parse(s.responseText).channelId;debug("New channel opened "+t),r.channelId=t,i(t),r.channelOpenListeners.forEach(o=>{debug("Delayed update success"),o(t)}),r.channelOpenListeners=[],sessionsData[e]!==void 0&&continueListening(e,t,0,0)}else s.status===401?listeners.forEach(t=>{t.postMessage({messageType:"channelOpeningNotAuthorized"})}):listeners.forEach(t=>{t.postMessage({messageType:"channelOpeningFailed",error:"HTTP Status "+s.status})});delete r.channelOpeningInProgress}},debug("Opening channel",workerUniqueIdentifier,e),s.open("GET",r.urlPrefix+"server-events/open-channel/"+workerUniqueIdentifier,!0),e.length>0&&s.setRequestHeader("Authorization",e),s.withCredentials=!0,s.send()}else debug("Page connected to channel"),i(r.channelId)}function continueListening(e,n,i,r){const s=new XMLHttpRequest;if(s.onreadystatechange=function(){if(!(sessionsData[e]===void 0||sessionsData[e].channelId===void 0)){if(s.readyState===XMLHttpRequest.DONE){const t=sessionsData[e];if(s.status===200){const o=JSON.parse(this.responseText);if(o.error!==void 0)n="",debug("Sending emergencyReload ["+this.responseText+"]"),listeners.forEach(u=>{u.postMessage({messageType:"emergencyReload",error:"Server events listener error: ["+o.error+"]"})});else if(o.events!==void 0&&o.events.length>0){debug("Maybe sending events to listeners "+listeners.length);for(let u=0;u<listeners.length;u++){const l=listeners[u],c=o.events.filter(function(f){return f.subscriptionsIds.filter(p=>t.subscriptionsToListener.filter(a=>a[0]===p&&a[1]===l).length>0).length>0});c.length>0&&(debug("Sending events to page "+c.length),l.postMessage({messageType:"events",events:c}))}}setTimeout(()=>{continueListening(e,n,0,r+1)})}else if(i<5)setTimeout(()=>{continueListening(e,n,i+1,r)},4e3);else{const o="Server events listener connection error";delete t.channelId,debug("Sending unableToConnect (emergencyReload)"),listeners.forEach(u=>{u.postMessage({messageType:"unableToConnect",error:o})})}}}},sessionsData[e]!==void 0){const t=sessionsData[e];debug("Listening "+r+(i>0?" Retry "+i:"")+" in session "+e),s.open("GET",t.urlPrefix+"server-events/listen/"+n+"/"+workerUniqueIdentifier+"/"+r,!0),e.length>0&&s.setRequestHeader("Authorization",e),s.withCredentials=!0,s.timeout=6e4,s.send()}}function closeConnectionForClosedPage(e,n){if(debug("page disconnected"),sessionsData[e]!==void 0){const i=sessionsData[e],r=i.subscriptionsToListener.filter(s=>s[1]===n);i.subscriptionsToListener=i.subscriptionsToListener.filter(s=>s[1]!==n),listeners=listeners.filter(s=>s!==n);for(let s=0;s<r.length;s++){const t=r[s][0],o=new XMLHttpRequest;o.onreadystatechange=function(){o.readyState===XMLHttpRequest.DONE&&(o.status===200||debug("Error while unsubscribing",o.status))},o.open("GET",i.urlPrefix+"server-events/unsubscribe/"+i.channelId+"/"+t,!0),e.length>0&&o.setRequestHeader("Authorization",e),o.withCredentials=!0,o.send()}}}function closeAllConnections(e){if(sessionsData[e]!==void 0){const n=sessionsData[e];debug("closeAllConnections");const i=n.subscriptionsToListener;n.subscriptionsToListener=[],i.forEach(r=>delete listeners[listeners.indexOf(r[1])]);for(let r=0;r<i.length;r++){const s=i[r][0],t=new XMLHttpRequest;t.onreadystatechange=function(){t.readyState===XMLHttpRequest.DONE&&(t.status===200||debug("Error while unsubscribing",t.status))},t.open("GET",n.urlPrefix+"server-events/unsubscribe/"+n.channelId+"/"+s,!0),e.length>0&&t.setRequestHeader("Authorization",e),t.withCredentials=!0,t.send()}delete sessionsData[e]}}function handleMessage(e,n){switch(debug("Received message "+n.messageType),n.messageType){case"ping":e.postMessage({messageType:"pong"});break;case"userLoggedIn":debug("User logged in");break;case"userLoggedOut":if(debug("userLoggedOut"),n.sessionId!==void 0)closeAllConnections(n.sessionId);else throw new Error("userLoggedOut: Session id is missing");break;case"listen":if(n.sessionId!==void 0&&n.urlPrefix!==void 0)startListening(n.sessionId,n.urlPrefix,i=>{e.postMessage({messageType:"listenResponse",channelId:i})});else throw new Error("listen: No sessionId or no urlPrefix");break;case"subscribe":if(n.sessionId!==void 0&&n.subscriptionUrl!==void 0)subscribe(n.sessionId,e,n.subscriptionUrl,i=>{e.postMessage({messageType:"subscribed",subscriptionId:i})});else throw new Error("subscribe: No sessionId or no subscriptionUrl");break;case"unsubscribe":if(n.sessionId!==void 0&&n.subscriptionId!==void 0)unsubscribe(n.sessionId,e,n.subscriptionId,()=>{e.postMessage({messageType:"unsubscribed",subscriptionId:n.subscriptionId})});else throw new Error("unsubscribe: No sessionId or no subscriptionId");break;case"pong":checkAlive=checkAlive.filter(i=>i[0]!==e),checkAlive.push([e,new Date().getTime()]);break;case"pageClosed":n.sessionId!==void 0&&closeConnectionForClosedPage(n.sessionId,e);break}}if(isSharedWorker)self.addEventListener("connect",function(e){const n=e.ports[0];listeners.push(n),n.addEventListener("message",function(i){handleMessage(n,i.data)},!1),n.start()},!1);else{const e=this;listeners.push(e),onmessage=n=>{handleMessage(e,n.data)}}
